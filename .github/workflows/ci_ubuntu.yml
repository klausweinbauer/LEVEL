name: CI Ubuntu

on:
  push:
    branches: ["main", "development"]
  pull_request:
    branches: ["main"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Install Valgrind
        run: | 
          sudo apt update
          sudo apt-get install valgrind           

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Install GCOVR
        run: |
          sudo apt update
          sudo apt-get install -y pip python3
          sudo apt-get clean
          pip3 install git+https://github.com/gcovr/gcovr.git

      - name: Generate Code Coverage Report
        run: python3 -m gcovr --cobertura LEVEL_Coverage.xml -e "${{github.workspace}}/test/*" -e "${{github.workspace}}/src/msg/*" -e "${{github.workspace}}/build/*" --object-directory ${{github.workspace}}/build/test/unit/ --exclude-unreachable-branches --exclude-function-lines --exclude-throw-branches

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./LEVEL_Coverage.xml
          flags: unittests
          fail_ci_if_error: true
          verbose: true
